/** @addtogroup OceanFFTStandAlone */
/*@{*/

#ifndef OPENGLWIDGET_H
#define OPENGLWIDGET_H
//----------------------------------------------------------------------------------------------------------------------
#ifdef DARWIN
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif
//----------------------------------------------------------------------------------------------------------------------
#include "ShaderProgram.h"
#include "Shader.h"
#include "ModelLoader.h"
#include "OceanGrid.h"
#include "Skybox.h"
#include "Boat.h"

#include <QGLWidget>
#include <QEvent>
#include <QResizeEvent>
#include <QMessageBox>
#include <Camera.h>
#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
//----------------------------------------------------------------------------------------------------------------------
/// @brief A class for initialising and rendering the ocean, camera, skybox, etc
/// @author Toby Gilbert
//----------------------------------------------------------------------------------------------------------------------
class OpenGLWidget : public QGLWidget
{
    Q_OBJECT //must include to gain access to qt stuff

public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    /// @param _format the format of the OpenGL context
    /// @param _parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    explicit OpenGLWidget(const QGLFormat _format, QWidget *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~OpenGLWidget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the virtual initialize class is called once when the window is created and we have a valid GL context
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief called to resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(const int _w, const int _h );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse move
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------

    /// @brief Trigger when mouse button pressed
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Triggered when mosue button released
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Triggered when a key press occurs
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Triggered when scroll wheel moved
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent(QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Generate fbos for rendering the scene to a texture for use with reflections
    //----------------------------------------------------------------------------------------------------------------------
    void genFBOs();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Renders the scene upside down to a texture for use with reflections in the shader
    //----------------------------------------------------------------------------------------------------------------------
    void renderReflections();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The ocean grid
    //----------------------------------------------------------------------------------------------------------------------
    OceanGrid *m_oceanGrid;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the sea top colour
    /// @return the sea top colour
    //----------------------------------------------------------------------------------------------------------------------
    float3 getSeaTopColour();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the sea base colour
    /// @return the sea base colour
    //----------------------------------------------------------------------------------------------------------------------
    float3 getSeaBaseColour();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the top colour of the waves
    //----------------------------------------------------------------------------------------------------------------------
    void updateTopColour(QColor _colour);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the base colour of the waves
    //----------------------------------------------------------------------------------------------------------------------
    void updateBaseColour(QColor _colour);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Model matrix
    //----------------------------------------------------------------------------------------------------------------------
    glm::mat4 m_modelMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Height of the window
    //----------------------------------------------------------------------------------------------------------------------
    int m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Width of the window
    //----------------------------------------------------------------------------------------------------------------------
    int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    glm::mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model pos
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Spin face x
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sping face y
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief rotate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief translate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Skybox Model
    //----------------------------------------------------------------------------------------------------------------------
    Skybox *m_skybox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A framebuffer for rendering the scene upside down
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_reflectFBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The position of the sun in world space
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_sunPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A boat model
    //----------------------------------------------------------------------------------------------------------------------
    Boat *m_boat;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bool to dictate whether the boat is rendered
    //----------------------------------------------------------------------------------------------------------------------
    bool m_renderBoat;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bool to dictate whether the skybox is rendered
    //----------------------------------------------------------------------------------------------------------------------
    bool m_renderSkyBox;
    //----------------------------------------------------------------------------------------------------------------------
public slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the choppiness scaler
    //----------------------------------------------------------------------------------------------------------------------
    void updateChoppiness(int value);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the x componant of the wind direction
    //----------------------------------------------------------------------------------------------------------------------
    void updateWindDirX(double _x);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the y componant of the wind direction
    //----------------------------------------------------------------------------------------------------------------------
    void updateWindDirY(double _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Reset the simulation and re-initialise
    //----------------------------------------------------------------------------------------------------------------------
    void resetSim();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief update the resolution of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    void updateResolution(QString _res);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update the maximum amplitude of any wave
    //----------------------------------------------------------------------------------------------------------------------
    void updateAmplitude(double _value);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief switches the bool to render the skybox or not
    //----------------------------------------------------------------------------------------------------------------------
    void skyboxCheckBox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief switches the bool to render the boat or not
    //----------------------------------------------------------------------------------------------------------------------
    void boatCheckBox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the width of the sun streak width
    //----------------------------------------------------------------------------------------------------------------------
    void setSunStreakWidth(double _width);
    //----------------------------------------------------------------------------------------------------------------------
signals:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tell the line edit to update
    //----------------------------------------------------------------------------------------------------------------------
    void updateTimer(float _time);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Tell the line edit to update
    //----------------------------------------------------------------------------------------------------------------------
    void updateFPS(float _FPS);
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // OPENGLWIDGET_H
/*@}*/
