#ifndef OCEANGRID_H_
#define OCEANGRID_H_
// ----------------------------------------------------------------------------------------------------------------------------------------
/// @author Toby Gilbert
// ----------------------------------------------------------------------------------------------------------------------------------------
#include <vector>
#include <glm/glm.hpp>
#include <cuda_runtime.h>
#include <helper_cuda.h>
#include <cuda_gl_interop.h>
#include <cufftw.h>
// ----------------------------------------------------------------------------------------------------------------------------------------
#include "ShaderProgram.h"
// ----------------------------------------------------------------------------------------------------------------------------------------
class OceanGrid{
public:
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    /// @param _resolution the resoluition of the grid
    /// @param _width The real width of the grid
    /// @param _depth The real depth of the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    OceanGrid(int _resolution, int _width, int _depth);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    // ----------------------------------------------------------------------------------------------------------------------------------------
    ~OceanGrid();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Initialise the object and fill m_gridVerts with points;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void initialise();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Load the mode, view projection matrix etc to the shader;
    /// @brief _modelMatrix The model matrix
    /// @brief _viewMatrix The view matrix
    /// @brief _porjectionMatrix The projection matrix
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, glm::mat4 _viewMatrix, glm::mat4 _projectionMatrix);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Render the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void render();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the time of the simulation
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void update();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Returns a texture handle which can be used to achieve local reflections in the water - Unused at present
    /// @return m_reflectTex A handle to the local reflection texture
    // ----------------------------------------------------------------------------------------------------------------------------------------
    inline GLuint* getReflectTex(){return &m_reflectTex;}
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Loads the enviroment cube map to the shader for use with global reflections
    /// @param _pathToFile The path to the cubemap
    /// @param _activeTexture the OpenGL active texture you wish to use for the cubemap
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void loadCubeMap(std::string _pathToFile, GLint _activeTexture);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Moves the sun/light left
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void moveSunLeft();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Moves the sun/light right
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void moveSunRight();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Moves the sun/light up
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void moveSunUp();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Moves the sun/light down
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void moveSunDown();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the choppines of the FFT waves
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void updateChoppiness(float _choppiness);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    inline float getTime(){return m_time;}
private:
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Creates a set of frequencies at time zero for use with FFT waves
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void createH0();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The phillips specturm was developed in oceanographic research for modelling waves larger than
    /// capillary waves in a fully developed ocean
    /// @param _k A position on the grid
    /// @returns The phillips spectrum for the given position _k
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float phillips(glm::vec2 _k);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A random Gaussian number generator
    /// @returns A random Gaussian number with normal distribution
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float gauss();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Create the shader used to draw the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void createShader();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Stores the verticies of the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_gridVerts;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Stores the height of the vertices on the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<GLfloat> m_gridHeights;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The resolution of the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_resolution;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Our OpenGL shader program
    // ----------------------------------------------------------------------------------------------------------------------------------------
    ShaderProgram *m_shaderProgram;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Vertex Shader
    // ----------------------------------------------------------------------------------------------------------------------------------------
    Shader *m_vertShader;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Fragment Shader
    // ----------------------------------------------------------------------------------------------------------------------------------------
    Shader *m_fragShader;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Our OpenGL Vertex Array Object
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VAO;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer to store the vertex positions of our grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOverts;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The number of points on the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_vertSize;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The width of the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_width;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The depth of the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_depth;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer to store the colours of the points on the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOHt;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer to store the normals of the points on the grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOnormals;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer to store the new heights of the vertices
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOheights;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer for storing waves used in the Gerstner model
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOwaves;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer for storing  frequency field at time zero
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOh0;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOXDisplacement;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOZDisplacement;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The cuda FFT plan used for the cuFFT lib
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cufftHandle m_fftPlan;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceVerts;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceNormals;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceWaves;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceHt;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceH0;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceHeights;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceXDisplacement;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceZDisplacement;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The wind speed, direction, used for FFT waves
    // ----------------------------------------------------------------------------------------------------------------------------------------
    glm::vec2 m_windSpeed;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Represents the smallest wave length a wave can have
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float m_l;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The resolution of the FFT grid
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float m_L;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The amplitude of the waves used for the phillips spectrum
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float m_A;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A texture handle for the local reflections
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_reflectTex;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The shader location for the reflections texture
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_reflectLoc;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The position of the sun used for shading
    // ----------------------------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_sunPos;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The direction the sun is facing
    // ----------------------------------------------------------------------------------------------------------------------------------------
    GLuint m_sunDirectionLoc;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The choppiness of the FFT waves
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float m_choppiness;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float m_time;
};
// ----------------------------------------------------------------------------------------------------------------------------------------
#endif
