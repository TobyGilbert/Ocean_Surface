/** @addtogroup OceanFFTStandAlone */
/*@{*/

#ifndef OCEANGRID_H_
#define OCEANGRID_H_
//----------------------------------------------------------------------------------------------------------------------
#ifdef DARWIN
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif

#include "ShaderProgram.h"
//----------------------------------------------------------------------------------------------------------------------
#include <vector>
#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <cuda_runtime.h>
#include <helper_cuda.h>
#include <cuda_gl_interop.h>
#include <cufftw.h>
#include <QColor>
#include "Texture.h"
//----------------------------------------------------------------------------------------------------------------------
/// @brief A class for creating a grid of points, creating the phillips spectrum and a the vertex height in the frequency dome at time zero
/// @author Toby Gilbert
//----------------------------------------------------------------------------------------------------------------------
class OceanGrid{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    /// @param _resolution the resoluition of the grid
    /// @param _width the real width of the grid in world space
    /// @param _depth the real depth of the grid in world space
    //----------------------------------------------------------------------------------------------------------------------
    OceanGrid(int _resolution, int _width, int _depth);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~OceanGrid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Initialise the object and fill m_gridVerts with points;
    //----------------------------------------------------------------------------------------------------------------------
    void initialise();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Load the mode, view projection matrix etc to the shader;
    /// @brief _modelMatrix The model matrix
    /// @brief _viewMatrix The view matrix
    /// @brief _porjectionMatrix The projection matrix
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, glm::mat4 _viewMatrix, glm::mat4 _projectionMatrix);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Render the grid
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the time of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns a texture handle which can be used to achieve local reflections in the water - Unused at present
    /// @return m_reflectTex A handle to the local reflection texture
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint* getReflectTex(){return &m_reflectTex;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates a scaler to increase the affect of chopiness displacement
    /// @param _choppiness a scaler to affect influence of x and z dispalcement
    //----------------------------------------------------------------------------------------------------------------------
    void updateChoppiness(float _choppiness);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Retuns the current time of the simulation so it can be displayed on a line edit
    /// @returns m_time the current time of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    inline float getTime(){return m_time;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets a new position of the sun in world space
    /// @param _sunPos a new position of the sun
    //----------------------------------------------------------------------------------------------------------------------
    void setSunPos(glm::vec3 _sunPos){m_sunPos = _sunPos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets an x componant of the wind direction
    /// @param _x x componant of the wind direction
    //----------------------------------------------------------------------------------------------------------------------
    void setWindDirX(double _x){m_windDirection.x = _x;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the z componant of the wind direction
    /// @param _y sets the y componant of the wind direction
    //----------------------------------------------------------------------------------------------------------------------
    void setWindDirY(double _y){m_windDirection.y = _y;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Frees memory allocated on the host and device and re-initialises the simulation
    //----------------------------------------------------------------------------------------------------------------------
    void resetSim();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets a resolution of an ocean tile
    /// @param _resolution the grid resolution
    //----------------------------------------------------------------------------------------------------------------------
    void setResolution(int _resolution);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets a maximum amplitude of any wave
    /// @param _value a new max amplitude
    //----------------------------------------------------------------------------------------------------------------------
    void setAmplitude(double _value);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Assigns the seaBaseColour uniform in the fragment shader a new colour
    /// @param _col the new colour
    //----------------------------------------------------------------------------------------------------------------------
    void setSeaBaseCol(QColor _col);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Assigns the seaTopColour uniform in the fragment shader a new colour
    /// @param _col the new colour
    //----------------------------------------------------------------------------------------------------------------------
    void setSeaTopCol(QColor _col);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the sea top colour used in the Ocean shader
    /// @return m_seaTopColour the top colour used in the shader
    //----------------------------------------------------------------------------------------------------------------------
    float3 getSeaTopColour(){return m_seaTopColour;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Retuns the sea base colour using in the Ocean shader
    /// @return m_seaBaseColour the base colour used in the shader
    //----------------------------------------------------------------------------------------------------------------------
    float3 getSeaBaseColour(){return m_seaBaseColour;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Creates a set of frequencies at time zero for use with FFT waves
    //----------------------------------------------------------------------------------------------------------------------
    void createH0();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The phillips specturm was developed in oceanographic research for modelling waves larger than
    /// capillary waves in a fully developed ocean
    /// @param _k A position on the grid
    /// @returns The phillips spectrum for the given position _k
    //----------------------------------------------------------------------------------------------------------------------
    float phillips(float2 _k);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A random Gaussian number generator
    /// @returns A random Gaussian number with normal distribution
    //----------------------------------------------------------------------------------------------------------------------
    float gauss();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create the shader used to draw the grid
    //----------------------------------------------------------------------------------------------------------------------
    void createShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create a grid of vertices
    //----------------------------------------------------------------------------------------------------------------------
    void createGrid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores the verticies of the grid
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_gridVerts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The resolution of the grid
    //----------------------------------------------------------------------------------------------------------------------
    int m_resolution;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our OpenGL shader program
    //----------------------------------------------------------------------------------------------------------------------
    ShaderProgram *m_shaderProgram;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Vertex Shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_vertShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Fragment Shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_fragShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our OpenGL Vertex Array Object
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a handle to an OpenGL buffer for storing vertex positions of the grid
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOverts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a handle to an OpenGL buffer for storing vertex normals
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOnorms;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The number of points on the grid
    //----------------------------------------------------------------------------------------------------------------------
    int m_vertSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The width of the grid
    //----------------------------------------------------------------------------------------------------------------------
    int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The depth of the grid
    //----------------------------------------------------------------------------------------------------------------------
    int m_depth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer for storing waves used in the Gerstner model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOwaves;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The cuda FFT plan used for the cuFFT lib
    //----------------------------------------------------------------------------------------------------------------------
    cufftHandle m_fftPlan;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A graphics resource mapped to the vertex positions OpenGL buffer
    //----------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceVerts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A graphics resource mapped to the vertex normals OpenGL buffer
    //----------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_resourceNorms;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The wind speed, direction, used for FFT waves
    //----------------------------------------------------------------------------------------------------------------------
    float m_windSpeed;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The direction of the wind float2 where x cmponant represents the x axis and y represents the z axis
    //----------------------------------------------------------------------------------------------------------------------
    float2 m_windDirection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Represents the smallest wave length a wave can have
    //----------------------------------------------------------------------------------------------------------------------
    float m_l;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The resolution of the FFT grid
    //----------------------------------------------------------------------------------------------------------------------
    float m_L;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The amplitude of the waves used for the phillips spectrum
    //----------------------------------------------------------------------------------------------------------------------
    double m_A;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A texture handle for the local reflections
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_reflectTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The position of the sun used for shading
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_sunPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The direction the sun is facing
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_sunPositionLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The choppiness of the FFT waves
    //----------------------------------------------------------------------------------------------------------------------
    float m_choppiness;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A VBO used to offsets instanced of the ocean tile
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VBOTilePos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The number of ocean tiles
    //----------------------------------------------------------------------------------------------------------------------
    int m_numTiles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Creates a perline noise texture which can used alongside FFT to hide tiling
    //----------------------------------------------------------------------------------------------------------------------
    void createPerlinTexture(int _activeTexture);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to the perline noise texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_perlinTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The difference between current time and start time
    //----------------------------------------------------------------------------------------------------------------------
    float m_time;
    //----------------------------------------------------------------------------------------------------------------------
    /// The number of tiles across or along e.g. 3 tiles in the x and 3 tiles in the z
    //----------------------------------------------------------------------------------------------------------------------
    int m_numLayers;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Device array for the frequency at time 0
    //----------------------------------------------------------------------------------------------------------------------
    float2* d_H0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Device array for the frequency field
    //----------------------------------------------------------------------------------------------------------------------
    float2* d_Ht;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Device array for storing the new heights of the field after FFT has been conducted
    //----------------------------------------------------------------------------------------------------------------------
    float2* d_Heights;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A host side array for storing heights in the frequency domain at time zero
    //----------------------------------------------------------------------------------------------------------------------
    float2* h_H0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A host side array for storing heights in the frequency domain at a particular time
    //----------------------------------------------------------------------------------------------------------------------
    float2* h_Ht;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A device side array for storing a displacemnet in the x axis
    //----------------------------------------------------------------------------------------------------------------------
    float2* d_chopX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A device side array for storing a displacement in the z axis
    //----------------------------------------------------------------------------------------------------------------------
    float2* d_chopZ;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The location of the sea base colour in the ocean shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_seaBaseColLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The location of the sea top colour in the ocean shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_seaTopColLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The sea base colour used in the shader
    //----------------------------------------------------------------------------------------------------------------------
    float3 m_seaBaseColour;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The sea top colour used in the shader
    //----------------------------------------------------------------------------------------------------------------------
    float3 m_seaTopColour;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A texture for the dudv map
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_dudvTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Time uniform location in the shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_timeLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The size of the the sun streak
    //----------------------------------------------------------------------------------------------------------------------
    float m_sunStreak;
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_sunStreakLoc;
};
// ----------------------------------------------------------------------------------------------------------------------------------------
#endif
/*@}*/
