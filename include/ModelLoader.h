/** @addtogroup OceanFFTStandAlone */
/*@{*/

#ifndef MODELLOADER_H
#define MODELLOADER_H
//----------------------------------------------------------------------------------------------------------------------
#ifdef DARWIN
#include <OpenGL/gl3.h>
#else
#include <GL/glew.h>
#include <GL/gl.h>
#endif
//----------------------------------------------------------------------------------------------------------------------
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <vector>
#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include "Texture.h"
//----------------------------------------------------------------------------------------------------------------------
/// @brief A set of classes for loading mesh data from an e.g. obj using the assimp library
//----------------------------------------------------------------------------------------------------------------------
class Mesh;
//----------------------------------------------------------------------------------------------------------------------
/// @brief A class for recurssively creating mesh objects and drawing them all
//----------------------------------------------------------------------------------------------------------------------
class ModelLoader{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    /// @param _fileName the location of the file you want to load
    //----------------------------------------------------------------------------------------------------------------------
    ModelLoader(char *_fileName);
    ModelLoader(char *_fileName, std::vector<std::string> _textures);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~ModelLoader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A recursive function for processing the model file
    /// @param _node an aiNode which is assimps way of storing part of a model file
    /// @param _scene the whole model file
    //----------------------------------------------------------------------------------------------------------------------
    void loadMesh(const aiNode *_node, const aiScene *_scene);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief extracts vertices, normals, texture coordinates from an aiMesh
    //----------------------------------------------------------------------------------------------------------------------
    void processMesh(const aiMesh *_mesh);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Renders all the meshes in a model file
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores all the meshes in a model file
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Mesh*> m_meshes;
    //----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
/// @brief A class for loading parts or all of a model file and loading them into an obj
//----------------------------------------------------------------------------------------------------------------------
class Mesh{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    /// @param _vertices a vector containing the vertices of the mesh
    /// @param _normals a vector containing the normals of the mesh
    /// @param _texCoords a vector containing the texCoords of the the mesh
    /// @param _indices a vector containing the indices of the mesh
    //----------------------------------------------------------------------------------------------------------------------
    Mesh(std::vector<glm::vec3> *_vertices, std::vector<glm::vec3> *_normals, std::vector<glm::vec2> *_texCoords, std::vector<GLuint> *_indices);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Mesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Renders the mesh
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to an OpenGL Vertex Array Object
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to an OpenGL Vertex Buffer Object for storing vertices
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_verticesVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to an OpenGL Vertex Buffer Object for storing normals
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_normalsVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to an OpenGL Vertex Buffer Object for storing texture coordinates
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_texCoordsVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A handle to an OpenGL Vertex Buffer Object for storing face indices
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_indicesVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The number of indices used when drawing
    //----------------------------------------------------------------------------------------------------------------------
    int m_numIndices;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif
/*@}*/
